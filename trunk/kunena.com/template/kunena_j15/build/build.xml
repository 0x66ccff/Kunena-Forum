<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE project>
<!--
  Kunena Joomla 1.5 template ant build file

  @version      $Id: build.xml 2902 2010-07-03 22:04:12Z mahagr $
  @package		Kunena
  @subpackage	com_kunena
  @copyright	Copyright (C) 2008 - 2010 Kunena Team. All rights reserved.
  				portions (C) 2007 MjazTools. All rights reserved.
  @license		GNU General Public License <http://www.gnu.org/copyleft/gpl.html>
  @link			http://www.kunena.com
  
  The following parameters can be defined inside the Eclipse build task as Arguments. They
  allow the build file to be platform independent as not path information resides within
  any of the build files.

  Parameters: (with default values - adjust the directories in Eclispe to your individual setup)
  	-Dproject_dir=..				(= workspace/kunena)
  	-Dpackage_dir=../../packages	(= workspace/packages)
  	-Dtmp_dir=tmp					(= workspace/kunena/build/tmp)
  	-Dbuild_dir=package				(= workspace/kunena/build/package)
-->
<project name="Kunena" default="dist" basedir=".">
	<description>Ant Build File for Kunena</description>
	<condition property="project_dir" value="..">
		<not>
			<isset property="project_dir" />
		</not>
	</condition>
	<condition property="package_dir" value="../../packages">
		<not>
			<isset property="package_dir" />
		</not>
	</condition>
	<condition property="tmp_dir" value="tmp">
		<not>
			<isset property="tmp_dir" />
		</not>
	</condition>
	<condition property="build_dir" value="package">
		<not>
			<isset property="build_dir" />
		</not>
	</condition>
	<property file="build.config.ini" />

	<target name="dist" depends="mkdir,archive,init,build,minify,copy,tar,zip,gzip,bz2,info,cleanup" />

	<target name="mkdir">
		<mkdir dir="${tmp_dir}" />
		<mkdir dir="${build_dir}" />
		<mkdir dir="${package_dir}" />
		<mkdir dir="${package_dir}/archive" />
	</target>

	<target name="archive">
		<move todir="${package_dir}/archive" preservelastmodified="yes" includeEmptyDirs="no">
			<fileset dir="${package_dir}">
				<exclude name="archive/" />
			</fileset>
		</move>
	</target>

	<target name="init" depends="mkdir">
		<xmlproperty file="${project_dir}/templateDetails.xml" collapseAttributes="true" prefix="xml" keepRoot="false" />
		<buildnumber />
		<tstamp>
			<format property="str.datefmt" pattern="${cfg.datefmt}" locale="${cfg.dateloc}" />
		</tstamp>
		<condition property="version.date" value="${str.datefmt}" else="">
			<istrue value="${cfg.adddate}" />
		</condition>

		<condition property="str.build" value="_${cfg.buildprefix}${build.number}" else="">
			<istrue value="${cfg.addbuild}" />
		</condition>
		<condition property="str.version" value="_${cfg.versionprefix}${xml.version}" else="">
			<istrue value="${cfg.addversion}" />
		</condition>
		<condition property="str.date" value="_${str.datefmt}" else="">
			<istrue value="${cfg.adddate}" />
		</condition>
		<property name="str.destfile" value="${package_dir}/${cfg.prefix}${cfg.name}${str.version}${str.build}${str.date}" />

		<condition property="do.tar">
			<istrue value="${cfg.tar}" />
		</condition>
		<condition property="do.zip">
			<istrue value="${cfg.zip}" />
		</condition>
		<condition property="do.gzip">
			<istrue value="${cfg.gzip}" />
		</condition>
		<condition property="do.bz2">
			<istrue value="${cfg.bz2}" />
		</condition>

		<copy todir="${tmp_dir}/admin">
			<fileset dir="${project_dir}/admin" />
		</copy>	
		<copy todir="${tmp_dir}/css">
			<fileset dir="${project_dir}/css" />
		</copy>	
		<copy todir="${tmp_dir}/html">
			<fileset dir="${project_dir}/html" />
		</copy>	
		<copy todir="${tmp_dir}/images">
			<fileset dir="${project_dir}/images" />
		</copy>	
		<copy todir="${tmp_dir}/js">
			<fileset dir="${project_dir}/js" />
		</copy>	
		<copy todir="${tmp_dir}">
			<fileset file="${project_dir}/*.*" />
		</copy>	
	</target>

	<target name="build" depends="init">
		<!-- Move files that contain version tags again and perform token replacement -->
		<filter token="kunenaversion" value="${xml.version}" />
		<filter token="kunenaversiondate" value="${version.date}" />
		<filter token="kunenaversionbuild" value="${build.number}" />
		<filter token="kunenaversionname" value="${xml.versionname}" />

		<move file="${tmp_dir}/templateDetails.xml" todir="${build_dir}" overwrite="true" filtering="true" />
		<move file="${tmp_dir}/COPYRIGHT.php" todir="${build_dir}" overwrite="true" filtering="true" />
		<move file="${tmp_dir}/CHANGELOG.php" todir="${build_dir}" overwrite="true" filtering="false" />
		<move file="${tmp_dir}/README.txt" todir="${build_dir}" overwrite="true" filtering="true" />
	</target>

	<target name="minify" depends="build">
	<!--
	YUI Compressor implementation
	See link below for details, documentations and samples
	http://javaflight.blogspot.com/2008/01/introducing-yui-compressor-ant-task.html
	-->
		<taskdef name="yui-compressor" classname="net.noha.tools.ant.yuicompressor.tasks.YuiCompressorTask">
			<classpath>
				<pathelement path="${project_dir}/build/lib/yuicompressor-2.4.2.jar" />
				<pathelement path="${project_dir}/build/lib/yui-compressor-ant-task-0.5.jar" />
			</classpath>
		</taskdef>

		<yui-compressor warn="false" munge="true" preserveallsemicolons="false" 
			fromdir="${project_dir}/js" 
			todir="${tmp_dir}/js">
		</yui-compressor>

		<yui-compressor warn="false" munge="true" preserveallsemicolons="false" 
			fromdir="${project_dir}/css" 
			todir="${tmp_dir}/css">
		</yui-compressor>
	</target>
	
	<target name="copy" depends="minify">
		<mkdir dir="${build_dir}/archive" />

	</target>

	<target name="tar" depends="copy" if="do.tar">
		<tar destfile="${str.destfile}.tar" basedir="${build_dir}" />
	</target>

	<target name="zip" depends="copy" if="do.zip">
		<zip destfile="${str.destfile}.zip" basedir="${build_dir}" />
	</target>

	<target name="gzip" depends="copy" if="do.gzip">
		<tar destfile="${str.destfile}.tar.gz" basedir="${build_dir}" compression="gzip" />
	</target>

	<target name="bz2" depends="copy" if="do.bz2">
		<tar destfile="${str.destfile}.tar.bz2" basedir="${build_dir}" compression="bzip2" />
	</target>

	<target name="info" depends="copy">
		<echo message="Ant Version:     ${ant.version}" />
		<echo message="Project:         ${cfg.name}" />
		<echo message="XML Name:        ${xml.name}" />
		<echo message="XML Version:     ${xml.version}" />
		<echo message="XML Author:      ${xml.author}" />
		<echo message="XML Copyright:   ${xml.copyright}" />
		<echo message="XML License:     ${xml.license}" />
		<echo message="XML Description: ${xml.description}" />
		<echo message="Build:           ${build.number}" />
		<echo message="Date:            ${TODAY}" />
	</target>

	<target name="cleanup" depends="info">
		<delete dir="${tmp_dir}" />
		<delete dir="${build_dir}" />
	</target>
</project>